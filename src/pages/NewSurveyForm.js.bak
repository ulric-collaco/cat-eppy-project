import React, { useState, useContext } from 'react';
import { useNavigate, useLocation, useParams } from 'react-router-dom';
import { UserContext } from '../contexts/UserContext';
import { uploadImageToCloudinary } from '../cloudinary';
import { saveSurvey } from '../services/surveyDbService';
import './NewSurveyForm.css';

const surveyQuestions = {
  'Employer': [
    'Name of the Employer',
    'Name of the Person Interviewed',
    'Contact Details: Email or Phone number'
  ],
  'Student': [
    // For Student survey, we'll handle everything in extraAlwaysQuestions
    'hidden', // These placeholders will be hidden in the UI
    'hidden',
    'hidden'
  ],
  'general': [ // Fallback
    'Name of the Employer',
    'Name of the Person Interviewed',
    'Contact Details: Email or Phone number'
  ]
};

const extraQuestions = {
  'Employer': [
  'Do you find the candidates suitable for the profile you offered them?',
  'Currently how many YP candidates are working with you?',
  'What was your motivation for hiring students from YP?',
  'How would you rate the onboarding process for YP candidates?\n(Probe: Areas where candidates typically excel or need more support upon joining.)',
  'How have YP candidates performed over time compared to other recruits?\n(Probe: Any examples of outstanding performance or areas where they consistently struggle.)'
  ],
  'Student': [
    'What skills did you learn in your course?',
    'How has the training helped you in your career?',
    'What additional training would you have liked?',
    'Would you recommend this program to others?',
    'How satisfied are you with your current job?'
  ],
  'general': [ // Fallback
    'Q6. Currently how many YP candidates are working with you?',
    'Q7. What was your motivation for hiring students from YP?\n(Consider: basic training done, job preparedness of student, bulk availability)',
    'Q8. How would you rate the onboarding process for YP candidates?\n(Consider: Areas where candidates typically excel or need more support upon joining)',
    'Q9. What level of supervision or mentoring do YP candidates typically require in their initial months?'
  ]
};

// Follow-up questions to show when the user answers 'no' to hiring YP
const extraQuestionsNo = {
  'Employer': [
    'Do you find the candidates suitable for the profile you wanted?',
    'What was your motivation for hiring the current employee that you did? What strengths were you actively looking for?\n(Probe: basic training done, job preparedness of student, bulk availability)',
    'How would you rate the onboarding process for your employees?\n(Probe: Areas where candidates typically excel or need more support upon joining.)'
  ],
  'Student': [
    'What was your experience with the course?',
    'What improvements would you suggest to the program?',
    'What challenges did you face during your training?'
  ],
  'general': [
    'How would you rate your overall experience?'
  ]
};

// Questions that should always appear for certain survey types (regardless of yes/no)
const extraAlwaysQuestions = {
  'Employer': [
    'What level of supervision or mentoring do your employees typically require in their initial months?',
    'What challenges do you generally face while selecting anybody as an employee? ',
    'What key skills or qualities do you find missing in candidates, if any? '
  ],
  'Student': [
    'Name*',
    'Gender*',
    'Age*',
    'Place of Origin*',
    'Current Place of Residence*',
    'Year of Completion*',
    'Education*',
    'Program Enrolled*',
    'What motivated you to enroll in the course at Yuvaparivartan Learning Center?',
    'What were your main motivations for joining the job market?',
    'Were you motivated by the possibility of career growth and promotions?',
    'Did helping your family or community play a significant role in your motivation?',
    'Did you have any role models whose career inspired you to join the workforce?',
    'Did you have any personal goals (such as buying something specific, saving for education, etc.) that motivated you to start working?',
    'If you left your job, what was the main reason?',
    'Was it difficult for you to manage work and personal life, and did that make you leave your job?',
    'Did you experience any discrimination or unfair treatment, and did that make you leave your job?',
    'Did you feel your skills matched the job requirements?',
    'Did you face any communication problems with your supervisors, colleagues, or customers that influenced your decision to leave the job?',
    'Did challenges with soft skills make it difficult to continue working?',
    'Were any of the following reasons part of why you left your job?',
    'Did you leave the job because you found certain tasks (like cleaning or serving others) culturally or personally difficult to accept?',
    'Current Employment Status',
    'How long did you stay in your first job after completing the course?',
    'What was your first job monthly income? (Optional)',
    'What kept you motivated to stay in your job?',
    'What challenges did you face in your job?',
    'And how did you overcome them?',
    'What advice would you give to others facing similar struggles?'
  ],
  'general': []
};

const NewSurveyForm = () => {
  const { currentUser } = useContext(UserContext);
  const navigate = useNavigate();
  const location = useLocation();
  const { type } = useParams();
  // Get survey type from URL parameters first, then try location state as fallback, then default to 'general'
  const surveyType = type || (location.state?.surveyType) || 'general';
  const questions = surveyQuestions[surveyType] || surveyQuestions.general;

  const [formData, setFormData] = useState({
    question1: '',
    question2: '',
    question3: '',
    currentlyEmployed: 'no' // For Student survey
  });
  const [selectedImage, setSelectedImage] = useState(null);
  const [imagePreview, setImagePreview] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');
  // This variable is used for employer surveys only
  const [surveyYesNoAnswer, setSurveyYesNoAnswer] = useState('no');
  // selected quick-tags per follow-up question index
  const [selectedTags, setSelectedTags] = useState({});
  // State for student survey options
  const [gender, setGender] = useState('');
  const [education, setEducation] = useState('');
  const [motivationEnroll, setMotivationEnroll] = useState([]);
  const [motivationJobMarket, setMotivationJobMarket] = useState([]);
  const [mainReason, setMainReason] = useState('');
  const [softSkillsChallenges, setSoftSkillsChallenges] = useState([]);
  const [leftJobReasons, setLeftJobReasons] = useState([]);
  const [currentStatus, setCurrentStatus] = useState('');
  const [jobDuration, setJobDuration] = useState('');
  const [monthlyIncome, setMonthlyIncome] = useState('');
  const [motivationStay, setMotivationStay] = useState([]);
  const [jobChallenges, setJobChallenges] = useState([]);
  const [overcomeChallenges, setOvercomeChallenges] = useState('');
  const [otherOptions, setOtherOptions] = useState({});  // For storing "Other" text inputs

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSurveyYesNoChange = (e) => {
    const { value } = e.target;
    setSurveyYesNoAnswer(value);
    if (value === 'no') {
      // Clean up form data for follow-up questions
      const newFormData = { ...formData };
      Object.keys(newFormData).forEach(key => {
        if (key.startsWith('customQuestion_')) {
          delete newFormData[key];
        }
      });
      setFormData(newFormData);
    }
  };
  
  // Handlers for student survey
  const handleGenderChange = (e) => {
    setGender(e.target.value);
  };
  
  const handleEducationChange = (e) => {
    setEducation(e.target.value);
  };
  
  const handleCheckboxChange = (setter, currentValues, value) => {
    if (currentValues.includes(value)) {
      setter(currentValues.filter(item => item !== value));
    } else {
      setter([...currentValues, value]);
    }
  };
  
  const handleRadioChange = (setter, value) => {
    setter(value);
  };
  
  const handleOtherTextChange = (key, value) => {
    setOtherOptions(prev => ({
      ...prev,
      [key]: value
    }));
  };

  const handleImageSelect = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.size > 5 * 1024 * 1024) { 
        setError('Image size must be less than 5MB');
        return;
      }

      setSelectedImage(file);
      setError('');

      const reader = new FileReader();
      reader.onload = (e) => {
        setImagePreview(e.target.result);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!selectedImage) {
      setError('Please select an image');
      return;
    }

    // Skip validation for hidden fields in Student survey
    if (surveyType !== 'Student') {
      for (let i = 0; i < questions.length; i++) {
        if (!formData[`question${i + 1}`]?.trim()) {
          setError('Please fill in all standard questions');
          return;
        }
      }
    }

    // For Employer survey, check follow-up questions
    if (surveyType === 'Employer') {
      if (surveyYesNoAnswer === 'yes') {
        // Check all follow-up questions are answered
        for (let i = 0; i < extraQuestions[surveyType].length; i++) {
          if (!formData[`customQuestion_${i}`]?.trim()) {
            setError(`Please fill in the follow-up questions.`);
            return;
          }
        }
      } else {
        // Check all follow-up questions for the 'no' path are answered
        for (let i = 0; i < extraQuestionsNo[surveyType].length; i++) {
          if (!formData[`customQuestionNo_${i}`]?.trim()) {
            setError(`Please fill in the follow-up questions.`);
            return;
          }
        }
      }
    }

    // Validate always-present questions
    if (extraAlwaysQuestions[surveyType] && extraAlwaysQuestions[surveyType].length > 0) {
      // For student survey, only validate required fields (marked with *)
      const requiredFields = surveyType === 'Student' ? 
        [0, 1, 2, 3, 4, 5, 6, 7] : // Only validate fields with * for students
        Array.from({ length: extraAlwaysQuestions[surveyType].length }, (_, i) => i); // Validate all for other survey types
      
      for (let i of requiredFields) {
        if (!formData[`alwaysQuestion_${i}`]?.trim() && 
            // For Student survey, if the field is managed by a different state variable like gender or education
            !(surveyType === 'Student' && (i === 1 || i === 6)) && 
            extraAlwaysQuestions[surveyType][i].includes('*')) {
          setError(`Please fill in the required ${surveyType.toLowerCase()} questions.`);
          return;
        }
      }
    }

    setIsSubmitting(true);
    setError('');

    try {
      const uploadResult = await uploadImageToCloudinary(selectedImage);

      // Collect dynamic follow-up answers from formData (future-proof)
      const customAnswers = [];
      
      // Add the "Are you currently employed?" question for Students
      if (surveyType === 'Student') {
        customAnswers.push({
          question: 'Are you currently employed?',
          answer: formData.currentlyEmployed === 'yes' ? 'Yes' : 'No'
        });
        
        // Add all the student questions
        extraQuestions['Student'].forEach((question, index) => {
          customAnswers.push({
            question,
            answer: formData[`studentQuestion_${index}`] || ''
          });
        });
      }

      Object.keys(formData).forEach((key) => {
        if (key.startsWith('customQuestion_')) {
          const idx = key.split('_')[1];
          const questionText = extraQuestions[surveyType] && extraQuestions[surveyType][idx]
            ? extraQuestions[surveyType][idx]
            : `Custom Question ${idx}`;
          // include any selected quick-tags for this follow-up index
          const base = (formData[key] || '').trim();
          const tagsForIndex = selectedTags[idx] || [];
          const tagSuffix = tagsForIndex.length ? (base ? ' | ' : '') + tagsForIndex.join(', ') : '';
          const answer = (base + tagSuffix).trim();
          customAnswers.push({ question: questionText, answer });
        }
        if (key.startsWith('customQuestionNo_')) {
          const idx = key.split('_')[1];
          const questionText = extraQuestionsNo[surveyType] && extraQuestionsNo[surveyType][idx]
            ? extraQuestionsNo[surveyType][idx]
            : `Custom Question No ${idx}`;
          const answer = (formData[key] || '').trim();
          customAnswers.push({ question: questionText, answer });
        }
        if (key.startsWith('alwaysQuestion_')) {
          const idx = key.split('_')[1];
          const questionText = extraAlwaysQuestions[surveyType] && extraAlwaysQuestions[surveyType][idx]
            ? extraAlwaysQuestions[surveyType][idx]
            : `Always Question ${idx}`;
          // include any selected quick-tags for this always-question (use key 'always_<idx>' in selectedTags)
          const base = (formData[key] || '').trim();
          const tagsForIndex = selectedTags[`always_${idx}`] || [];
          const tagSuffix = tagsForIndex.length ? (base ? ' | ' : '') + tagsForIndex.join(', ') : '';
          const answer = (base + tagSuffix).trim();
          customAnswers.push({ question: questionText, answer });
        }
      });

      const surveyData = {
        surveyType: surveyType,
        question1: formData.question1.trim(),
        question2: formData.question2.trim(),
        question3: formData.question3.trim(),
        custom_questions: customAnswers,
        imageUrl: uploadResult.url,
        imagePublicId: uploadResult.publicId,
      };

      await saveSurvey(surveyData, currentUser);

      navigate('/dashboard');
    } catch (error) {
      console.error('Error submitting survey:', error);
      setError(`Failed to submit survey: ${error.message}`);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="new-survey-form-page">
      <div className="form-container">
        <header className="form-header">
          <h1>Create New Survey</h1>
          {currentUser === 'Ulric' && (
            <div className="admin-indicator">
              🔧 Admin Mode - Creating test survey
            </div>
          )}
          <p className="survey-type-display">
            Survey Type: <strong>{surveyType}</strong>
          </p>
        </header>

        <form onSubmit={handleSubmit} className="survey-form">
          <div className="form-section">
            <label htmlFor="image" className="form-label">
              Upload an Image *
            </label>
            <input
              type="file"
              id="image"
              accept="image/*"
              onChange={handleImageSelect}
              className="image-input"
              required
            />
            {imagePreview && (
              <div className="image-preview">
                <img src={imagePreview} alt="Preview" />
              </div>
            )}
          </div>

          {/* Hide the standard questions for Student survey type */}
          {surveyType !== 'Student' && (
            <>
              <div className="form-section">
                <label htmlFor="question1" className="form-label">
                  {questions[0]} *
                </label>
                <input
                  type="text"
                  id="question1"
                  name="question1"
                  value={formData.question1}
                  onChange={handleInputChange}
                  placeholder="Enter employer name"
                  className="form-input"
                  required
                />
              </div>

              <div className="form-section">
                <label htmlFor="question2" className="form-label">
                  {questions[1]} *
                </label>
                <input
                  type="text"
                  id="question2"
                  name="question2"
                  value={formData.question2}
                  onChange={handleInputChange}
                  placeholder="Enter interviewee name"
                  className="form-input"
                  required
                />
              </div>

              <div className="form-section">
                <label htmlFor="question3" className="form-label">
                  {questions[2]} *
                </label>
                <input
                  type="text"
                  id="question3"
                  name="question3"
                  value={formData.question3}
                  onChange={handleInputChange}
                  placeholder="Enter email or phone number"
                  className="form-input"
                  required
                />
              </div>
            </>
          )}

          {/* For Student type, we set default values for these fields to pass validation */}
          {surveyType === 'Student' && (
            <input type="hidden" name="question1" value="Student Survey" />
          )}
          {surveyType === 'Student' && (
            <input type="hidden" name="question2" value="Student Survey" />
          )}
          {surveyType === 'Student' && (
            <input type="hidden" name="question3" value="Student Survey" />
          )}

          {/* Question 4: Yuva Parivartan Hiring (only for Employer) or Employment Status (for Student) */}
          {surveyType === 'Employer' ? (
            <div className="form-section">
              <label className="form-label">
                Q4. Did you hire students from Yuva Parivartan? *
              </label>
              <div className="radio-group">
                <div className="radio-button yes-button">
                  <input
                    type="radio"
                    id="answerYes"
                    name="surveyYesNoAnswer"
                    value="yes"
                    checked={surveyYesNoAnswer === 'yes'}
                    onChange={handleSurveyYesNoChange}
                  />
                  <label htmlFor="answerYes">Yes</label>
                </div>
                <div className="radio-button no-button">
                  <input
                    type="radio"
                    id="answerNo"
                    name="surveyYesNoAnswer"
                    value="no"
                    checked={surveyYesNoAnswer === 'no'}
                    onChange={handleSurveyYesNoChange}
                  />
                  <label htmlFor="answerNo">No</label>
                </div>
              </div>
            </div>
          ) : (
            <div className="form-section">
              <label className="form-label">
                Are you currently employed? *
              </label>
              <div className="radio-group">
                <div className="radio-button yes-button">
                  <input
                    type="radio"
                    id="currentlyEmployedYes"
                    name="currentlyEmployed"
                    value="yes"
                    checked={formData.currentlyEmployed === 'yes'}
                    onChange={(e) => setFormData({...formData, currentlyEmployed: e.target.value})}
                  />
                  <label htmlFor="currentlyEmployedYes">Yes</label>
                </div>
                <div className="radio-button no-button">
                  <input
                    type="radio"
                    id="currentlyEmployedNo"
                    name="currentlyEmployed"
                    value="no"
                    checked={formData.currentlyEmployed === 'no'}
                    onChange={(e) => setFormData({...formData, currentlyEmployed: e.target.value})}
                  />
                  <label htmlFor="currentlyEmployedNo">No</label>
                </div>
              </div>
            </div>
          )}

          {/* Follow-up Questions Section - Only used for Employers */}
          {(surveyType === 'Employer' && surveyYesNoAnswer === 'yes') && (
            <>
              {/* Employer follow-up questions */}
              {extraQuestions[surveyType].map((question, index) => {
                return (
                  <div className="form-section" key={`customQuestion_${index}`}>
                    <label htmlFor={`customQuestion_${index}`} className="form-label">
                      {question} *
                    </label>
                    {/* Quick-tag buttons for the 'motivation' question (index 2) */}
                    {surveyType === 'Employer' && index === 2 && (
                      <div className="tag-quick-add">
                        {['basic training done', 'job preparedness', 'bulk availability'].map(tag => {
                          const isSelected = (selectedTags[index] || []).includes(tag);
                          return (
                            <button
                              key={tag}
                              type="button"
                              className={`tag-button ${isSelected ? 'selected' : ''}`}
                              onClick={() => {
                                setSelectedTags(prev => {
                                  const cur = new Set(prev[index] || []);
                                  if (cur.has(tag)) cur.delete(tag); else cur.add(tag);
                                  return { ...prev, [index]: Array.from(cur) };
                                });
                              }}
                            >{isSelected ? '✓ ' + tag : tag}</button>
                          );
                        })}
                      </div>
                    )}
                    
                    <textarea
                      id={`customQuestion_${index}`}
                      name={`customQuestion_${index}`}
                      value={formData[`customQuestion_${index}`] || ''}
                      onChange={handleInputChange}
                      placeholder="Enter your answer here"
                      className="form-textarea"
                      required
                    />
                  </div>
                );
              })}
            </>
          )}

          {/* Student Survey Questions - Always show regardless of employed status */}
          {surveyType === 'Student' && (
            <>
              {extraQuestions[surveyType].map((question, index) => (
                <div className="form-section" key={`studentQuestion_${index}`}>
                  <label htmlFor={`studentQuestion_${index}`} className="form-label">
                    {question} *
                  </label>
                  <textarea
                    id={`studentQuestion_${index}`}
                    name={`studentQuestion_${index}`}
                    value={formData[`studentQuestion_${index}`] || ''}
                    onChange={handleInputChange}
                    placeholder="Enter your answer here"
                    className="form-textarea"
                    required
                  />
                </div>
              ))}
            </>
          )}

          {/* Employer no-path follow-up questions */}
          {(surveyType === 'Employer' && surveyYesNoAnswer === 'no') && (
            <>
              {extraQuestionsNo[surveyType].map((question, index) => (
                <div className="form-section" key={`customQuestionNo_${index}`}>
                  <label htmlFor={`customQuestionNo_${index}`} className="form-label">
                    {question} *
                  </label>
                  <textarea
                    id={`customQuestionNo_${index}`}
                    name={`customQuestionNo_${index}`}
                    value={formData[`customQuestionNo_${index}`] || ''}
                    onChange={handleInputChange}
                    placeholder="Enter your answer here"
                    className="form-textarea"
                    required
                  />
                </div>
              ))}
            </>
          )}

          {/* Always-present questions section */}
          {extraAlwaysQuestions[surveyType] && extraAlwaysQuestions[surveyType].length > 0 && (
            <>
              {surveyType === 'Student' ? (
                /* Student survey form with options */
                <>
                  {/* Question 1: Name */}
                  <div className="form-section">
                    <label htmlFor="studentName" className="form-label">
                      Name*
                    </label>
                    <input
                      type="text"
                      id="studentName"
                      name="alwaysQuestion_0"
                      value={formData[`alwaysQuestion_0`] || ''}
                      onChange={handleInputChange}
                      placeholder="Enter your name"
                      className="form-input"
                      required
                    />
                  </div>

                  {/* Question 2: Gender */}
                  <div className="form-section">
                    <label className="form-label">
                      Gender*
                    </label>
                    <div className="radio-group">
                      <div className="radio-button">
                        <input
                          type="radio"
                          id="genderMale"
                          name="gender"
                          value="Male"
                          checked={gender === 'Male'}
                          onChange={handleGenderChange}
                          required
                        />
                        <label htmlFor="genderMale">Male</label>
                      </div>
                      <div className="radio-button">
                        <input
                          type="radio"
                          id="genderFemale"
                          name="gender"
                          value="Female"
                          checked={gender === 'Female'}
                          onChange={handleGenderChange}
                        />
                        <label htmlFor="genderFemale">Female</label>
                      </div>
                      <div className="radio-button">
                        <input
                          type="radio"
                          id="genderNotSay"
                          name="gender"
                          value="Prefer not to say"
                          checked={gender === 'Prefer not to say'}
                          onChange={handleGenderChange}
                        />
                        <label htmlFor="genderNotSay">Prefer not to say</label>
                      </div>
                      <div className="radio-button">
                        <input
                          type="radio"
                          id="genderOther"
                          name="gender"
                          value="Other"
                          checked={gender === 'Other'}
                          onChange={handleGenderChange}
                        />
                        <label htmlFor="genderOther">Other</label>
                      </div>
                    </div>
                    {gender === 'Other' && (
                      <input
                        type="text"
                        placeholder="Please specify"
                        value={otherOptions.gender || ''}
                        onChange={(e) => handleOtherTextChange('gender', e.target.value)}
                        className="form-input other-input"
                      />
                    )}
                    <input 
                      type="hidden"
                      name="alwaysQuestion_1"
                      value={gender === 'Other' ? `Other: ${otherOptions.gender || ''}` : gender}
                    />
                  </div>

                  {/* Question 3: Age */}
                  <div className="form-section">
                    <label htmlFor="age" className="form-label">
                      Age*
                    </label>
                    <input
                      type="text"
                      id="age"
                      name="alwaysQuestion_2"
                      value={formData[`alwaysQuestion_2`] || ''}
                      onChange={handleInputChange}
                      placeholder="Enter your age"
                      className="form-input"
                      required
                    />
                  </div>

                  {/* Question 4: Place of Origin */}
                  <div className="form-section">
                    <label htmlFor="placeOfOrigin" className="form-label">
                      Place of Origin*
                    </label>
                    <input
                      type="text"
                      id="placeOfOrigin"
                      name="alwaysQuestion_3"
                      value={formData[`alwaysQuestion_3`] || ''}
                      onChange={handleInputChange}
                      placeholder="Enter your place of origin"
                      className="form-input"
                      required
                    />
                  </div>

                  {/* Question 5: Current Place of Residence */}
                  <div className="form-section">
                    <label htmlFor="currentResidence" className="form-label">
                      Current Place of Residence*
                    </label>
                    <input
                      type="text"
                      id="currentResidence"
                      name="alwaysQuestion_4"
                      value={formData[`alwaysQuestion_4`] || ''}
                      onChange={handleInputChange}
                      placeholder="Enter your current place of residence"
                      className="form-input"
                      required
                    />
                  </div>

                  {/* Question 6: Year of Completion */}
                  <div className="form-section">
                    <label htmlFor="yearOfCompletion" className="form-label">
                      Year of Completion*
                    </label>
                    <input
                      type="text"
                      id="yearOfCompletion"
                      name="alwaysQuestion_5"
                      value={formData[`alwaysQuestion_5`] || ''}
                      onChange={handleInputChange}
                      placeholder="Enter your year of completion"
                      className="form-input"
                      required
                    />
                  </div>

                  {/* Question 7: Education */}
                  <div className="form-section">
                    <label className="form-label">
                      Education*
                    </label>
                    <div className="radio-group vertical">
                      <div className="radio-button">
                        <input
                          type="radio"
                          id="educationNone"
                          name="education"
                          value="No education"
                          checked={education === 'No education'}
                          onChange={handleEducationChange}
                        />
                        <label htmlFor="educationNone">No education – Includes illiterate individuals with no formal schooling</label>
                      </div>
                      <div className="radio-button">
                        <input
                          type="radio"
                          id="educationPrimary"
                          name="education"
                          value="Primary education"
                          checked={education === 'Primary education'}
                          onChange={handleEducationChange}
                        />
                        <label htmlFor="educationPrimary">Primary education – Typically up to Class 5</label>
                      </div>
                      <div className="radio-button">
                        <input
                          type="radio"
                          id="educationMiddle"
                          name="education"
                          value="Middle/Secondary education"
                          checked={education === 'Middle/Secondary education'}
                          onChange={handleEducationChange}
                        />
                        <label htmlFor="educationMiddle">Middle/Secondary education – Class 6 to 10</label>
                      </div>
                      <div className="radio-button">
                        <input
                          type="radio"
                          id="educationHigher"
                          name="education"
                          value="Higher secondary"
                          checked={education === 'Higher secondary'}
                          onChange={handleEducationChange}
                        />
                        <label htmlFor="educationHigher">Higher secondary – Class 11 and 12 (HSC)</label>
                      </div>
                      <div className="radio-button">
                        <input
                          type="radio"
                          id="educationGraduation"
                          name="education"
                          value="Higher education"
                          checked={education === 'Higher education'}
                          onChange={handleEducationChange}
                        />
                        <label htmlFor="educationGraduation">Higher education – Includes diploma, graduation, and post-graduation</label>
                      </div>
                      <div className="radio-button">
                        <input
                          type="radio"
                          id="educationOther"
                          name="education"
                          value="Other"
                          checked={education === 'Other'}
                          onChange={handleEducationChange}
                        />
                        <label htmlFor="educationOther">Other</label>
                      </div>
                    </div>
                    {education === 'Other' && (
                      <input
                        type="text"
                        placeholder="Please specify"
                        value={otherOptions.education || ''}
                        onChange={(e) => handleOtherTextChange('education', e.target.value)}
                        className="form-input other-input"
                      />
                    )}
                    <input 
                      type="hidden"
                      name="alwaysQuestion_6"
                      value={education === 'Other' ? `Other: ${otherOptions.education || ''}` : education}
                    />
                  </div>

                  {/* Question 8: Program Enrolled */}
                  <div className="form-section">
                    <label htmlFor="programEnrolled" className="form-label">
                      Program Enrolled*
                    </label>
                    <input
                      type="text"
                      id="programEnrolled"
                      name="alwaysQuestion_7"
                      value={formData[`alwaysQuestion_7`] || ''}
                      onChange={handleInputChange}
                      placeholder="Enter the program you enrolled in"
                      className="form-input"
                      required
                    />
                  </div>

                  {/* Question 9: What motivated you to enroll */}
                  <div className="form-section">
                    <label className="form-label">
                      What motivated you to enroll in the course at Yuvaparivartan Learning Center?
                    </label>
                    <div className="checkbox-group vertical">
                      {['Improve earning potential', 'Gain new skills', 'Support family financially', 'Interest in field', 'Recommendation by others', 'Other'].map((option) => (
                        <div className="checkbox-item" key={option}>
                          <input
                            type="checkbox"
                            id={`motivationEnroll_${option.replace(/\s+/g, '')}`}
                            checked={motivationEnroll.includes(option)}
                            onChange={() => handleCheckboxChange(setMotivationEnroll, motivationEnroll, option)}
                          />
                          <label htmlFor={`motivationEnroll_${option.replace(/\s+/g, '')}`}>{option}</label>
                        </div>
                      ))}
                    </div>
                    {motivationEnroll.includes('Other') && (
                      <input
                        type="text"
                        placeholder="Please specify"
                        value={otherOptions.motivationEnroll || ''}
                        onChange={(e) => handleOtherTextChange('motivationEnroll', e.target.value)}
                        className="form-input other-input"
                      />
                    )}
                    <input 
                      type="hidden"
                      name="alwaysQuestion_8"
                      value={motivationEnroll.join(', ') + (motivationEnroll.includes('Other') ? ` (Other: ${otherOptions.motivationEnroll || ''})` : '')}
                    />
                  </div>

                  {/* Question 10: Main motivations for joining job market */}
                  <div className="form-section">
                    <label className="form-label">
                      What were your main motivations for joining the job market?
                    </label>
                    <div className="checkbox-group vertical">
                      {['To achieve financial independence', 'To support family members', 'To gain professional experience', 'To apply skills learned during training or education', 'To meet personal ambitions or dreams', 'Other'].map((option) => (
                        <div className="checkbox-item" key={option}>
                          <input
                            type="checkbox"
                            id={`motivationJobMarket_${option.replace(/\s+/g, '')}`}
                            checked={motivationJobMarket.includes(option)}
                            onChange={() => handleCheckboxChange(setMotivationJobMarket, motivationJobMarket, option)}
                          />
                          <label htmlFor={`motivationJobMarket_${option.replace(/\s+/g, '')}`}>{option}</label>
                        </div>
                      ))}
                    </div>
                    {motivationJobMarket.includes('Other') && (
                      <input
                        type="text"
                        placeholder="Please specify"
                        value={otherOptions.motivationJobMarket || ''}
                        onChange={(e) => handleOtherTextChange('motivationJobMarket', e.target.value)}
                        className="form-input other-input"
                      />
                    )}
                    <input 
                      type="hidden"
                      name="alwaysQuestion_9"
                      value={motivationJobMarket.join(', ') + (motivationJobMarket.includes('Other') ? ` (Other: ${otherOptions.motivationJobMarket || ''})` : '')}
                    />
                  </div>

                  {/* Remaining student questions... */}
                  {/* Question 11: Career growth motivations */}
                  <div className="form-section">
                    <label className="form-label">
                      Were you motivated by the possibility of career growth and promotions?
                    </label>
                    <div className="radio-group">
                      <div className="radio-button">
                        <input
                          type="radio"
                          id="careerGrowthYes"
                          name="careerGrowth"
                          value="Yes"
                          onChange={(e) => handleRadioChange(val => setFormData({...formData, 'alwaysQuestion_10': val}), e.target.value)}
                        />
                        <label htmlFor="careerGrowthYes">Yes</label>
                      </div>
                      <div className="radio-button">
                        <input
                          type="radio"
                          id="careerGrowthNo"
                          name="careerGrowth"
                          value="No"
                          onChange={(e) => handleRadioChange(val => setFormData({...formData, 'alwaysQuestion_10': val}), e.target.value)}
                        />
                        <label htmlFor="careerGrowthNo">No</label>
                      </div>
                    </div>
                  </div>

                  {/* Remaining student questions continue... */}
                  {/* All the remaining questions from the original form */}
                </>
              ) : (
                /* Original Employer questions */
                <>
                  {extraAlwaysQuestions[surveyType].map((question, index) => (
                    <div className="form-section" key={`alwaysQuestion_${index}`}>
                      <label htmlFor={`alwaysQuestion_${index}`} className="form-label">
                        {question} *
                      </label>
                      {/* Quick-tags for the 'challenges' question (Employer, alwaysQuestions index 1) */}
                      {surveyType === 'Employer' && index === 1 && (
                        <div className="tag-quick-add">
                          {['Student availability', 'Travel restrictions', 'Relocation issues', 'Salary expectations', 'Job continuity', 'Skill mismatch', 'Lack of experience', 'Cultural fit', 'Work readiness', 'Communication skills', 'Shift flexibility'].map(tag => {
                            const key = `always_${index}`;
                            const isSelected = (selectedTags[key] || []).includes(tag);
                            return (
                              <button
                                key={tag}
                                type="button"
                                className={`tag-button ${isSelected ? 'selected' : ''}`}
                                onClick={() => {
                                  setSelectedTags(prev => {
                                    const cur = new Set(prev[key] || []);
                                    if (cur.has(tag)) cur.delete(tag); else cur.add(tag);
                                    return { ...prev, [key]: Array.from(cur) };
                                  });
                                }}
                              >{isSelected ? '✓ ' + tag : tag}</button>
                            );
                          })}
                        </div>
                      )}
                      {/* Quick-tags for the 'skills missing' question (Employer, alwaysQuestions index 2) */}
                      {surveyType === 'Employer' && index === 2 && (
                        <div className="tag-quick-add">
                          {['Communication', 'Punctuality', 'Teamwork', 'Hygiene', 'Customer handling', 'Team collaboration'].map(tag => {
                            const key = `always_${index}`;
                            const isSelected = (selectedTags[key] || []).includes(tag);
                            return (
                              <button
                                key={tag}
                                type="button"
                                className={`tag-button ${isSelected ? 'selected' : ''}`}
                                onClick={() => {
                                  setSelectedTags(prev => {
                                    const cur = new Set(prev[key] || []);
                                    if (cur.has(tag)) cur.delete(tag); else cur.add(tag);
                                    return { ...prev, [key]: Array.from(cur) };
                                  });
                                }}
                              >{isSelected ? '✓ ' + tag : tag}</button>
                            );
                          })}
                        </div>
                      )}
                      <textarea
                        id={`alwaysQuestion_${index}`}
                        name={`alwaysQuestion_${index}`}
                        value={formData[`alwaysQuestion_${index}`] || ''}
                        onChange={handleInputChange}
                        placeholder="Enter your answer here"
                        className="form-textarea"
                        required
                      />
                    </div>
                  ))}
                </>
              )}
            </>
          )}

          {error && (
            <div className="error-message">
              {error}
            </div>
          )}

          <div className="form-actions">
            <button
              type="button"
              className="exit-button"
              onClick={() => navigate('/dashboard')}
              disabled={isSubmitting}
            >
              Exit
            </button>
            <button
              type="submit"
              className="submit-button"
              disabled={isSubmitting}
            >
              {isSubmitting ? 'Submitting...' : 'Submit Survey'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default NewSurveyForm;
